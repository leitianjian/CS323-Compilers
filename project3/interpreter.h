#ifndef INTERPRETER_H
#define INTERPRETER_H

#include "scanner.h"

// autogenerated by Bison, don't panic
// if your IDE can't resolve it - call make first
#include "parser.hpp"
#include "location.hh"
#include "ASTNode.h"

namespace Compiler {

// forward declare our simplistic AST node class so we
// can declare container for it without the header
// class ASTNode;

/**
 * This class is the interface for our scanner/lexer. The end user
 * is expected to use this. It drives scanner/lexer, keeps
 * parsed AST and generally is a good place to store additional
 * context data. Both parser and lexer have access to it via internal 
 * references.
 * 
 * I know that the AST is a bit too strong word for a simple
 * vector with nodes, but this is only an example. Get off me.
 */
class Interpreter
{
public:
    Interpreter();
    
    /**
     * Run parser. Results are stored inside.
     * \returns 0 on success, 1 on failure
     */
    int parse();
    
    /**
     * Clear AST
     */
    void clear();
    
    /**
     * Convert AST tree to string
     */
    std::string str() const;
    
    /**
     * Switch scanner input stream. Default is standard input (std::cin).
     * It will also reset AST.
     */
    void switchInputStream(std::istream *is);

    void switchIOStream(std::istream *is, std::ostream *os);

    const std::string &errorMsg() const;

    const int &errorFlag() const;

    /**
     * This is needed so that Scanner and Parser can call some
     * methods that we want to keep hidden from the end user.
     */
    friend class Parser;
    friend class Scanner;
    ASTNode *m_rootNode;  // Example AST
private:
    //Set error flag when error occur when parsing
    void setErrorFlag();

    // Used internally by Parser to set the root node of AST tree
    void setRoot(ASTNode *root);
    
    // Used internally by Scanner YY_USER_ACTION to update location indicator
    // void increaseLocation(unsigned int loc);

    // Used to clear tree by root node
    void clearTreeByNode(ASTNode *node);

    // Used to recursively print tree
    std::string strTree(ASTNode *node, int level) const;

    void appendErrorMsg(int type, const std::string &str, int lineno);

    // Used to get last Scanner location. Used in error messages.
    // const location &location() const;

    Compiler::location m_location;          // Used by scanner
    
private:
    Scanner m_scanner;
    Parser m_parser;
    int m_error;
    std::string m_errorMsg;
};

}

#endif // INTERPRETER_H
